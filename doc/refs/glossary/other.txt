```{glossary}
**!=**
    {term}`不等于运算符`；比较不等式的 {term}`值`，返回 {term}`bool`。TC++PL 2.3.1, 6.2, 16.3.10, 20.3.8, 22.4.3, 22.5.

**\#define**
    一个定义 {term}`macro` 的指令。

**`#include`**
    一种将一个 {term}`源文件` 纳入另一个源文件的文本机制。通常用于将一个 {term}`翻译单元` 从一个 {term}`.c 文件` 和它所需的 {term}`头文件` 中组成，以便在 {term}`程序` 的其余部分定义其观点。TC++PL 2.7, 13, D&E 18.1.
    
**+=**
    增量加法（add-and-assign）{term}`运算符`。a+=b 大致上等同于 a=a+b。对于 {term}`用户自定义类型` 来说，通常是一个有用的操作。TC++PL 6.1.1, 6.2, 11,3,2, 20.3.9, 22.5.

**.c file**
**.c 文件**
    含有 {term}`定义` 的 {term}`文件`。

**.cpp file**
**.cpp 文件**
    见 {term}`.c 文件`

**.cxx file**
**.cxx 文件**
    见 {term}`.c 文件`

**.h file**
**.h 文件**
    见 {term}`头文件`

**14882**
    {term}`ISO`/IEC 14882 - {term}`C++` {term}`编程语言` 的标准。

**\<\<**
    1. {term}`iostream` {term}`输出` {term}`运算符`。TC++PL 3.4, 21.2.1, D&E 8.3.1。
    2. 整数左移（left-shift）运算符。TC++PL 6.2。

**=**
    {term}`赋值运算符`；可以用于非 {term}`等于运算符` 的内置类型（除了 {term}`array`）、{term}`枚举`、{term}`字符串`、{term}`容器`、{term}`迭代器`、{term}`复数` 和 {term}`valarray`。对于一个类，= 默认定义为 {term}`成员` 间的赋值；如果需要，一个类的编写者可以以不同的方式定义它。tc++pl 2.3.1, 6.2, 11.2, 16.3.4, 20.3.6, 22.4.3, 22.5, d&e 2.12.1,11.4.4.
    
**=0**
    curious 符号，表示一个 {term}`virtual` {term}`函数` 是一个 纯虚函数。TC++PL 12.3. D&E 13.2.1.

**==**
    等于运算符；比较相等的 {term}`值`，返回 {term}`bool`。 `==` 可以用于 {term}`内置类型`、{term}`枚举`、{term}`字符串`、{term}`迭代器`、{term}`复数` 和 {term}`valarray`。== 默认不为类定义，但用户可以为用户自定义的类型定义它。请注意，== 对于 {term}`C 风格的字符串` 或数组来说，并不具有自然地预期的意义。TC++PL 2.3.1, 6.2, 16.3.10, 20.3.8, 22.4.3, 22.5.

**\>\>**
    1. {term}`iostream` {term}`输入` {term}`运算符`。TC++PL 3.6, 21.3.2, D&E 8.3.1。
    2. 整数右移（right-shift） 运算符。TC++PL 6.2。

**abstract class**
**抽象类**
    一个只定义 {term}`接口` 的 {term}`类`；作为 {term}`基类` 使用。声明一个 {term}`成员函数` 为纯虚函数，使其类成为抽象的，并防止创建抽象类的对象。使用抽象类是最小化 {term}`C++` {term}`程序` 中变化的影响和最小化编译时间的最有效方法之一。[例子](https://stroustrup.com/bs_faq2.html#abstract-class)。TC++PL 2.5.4, 12.4.2, D&E 13.2.

**abstract type**
**抽象类型**
    见 {term}`抽象类`

**abstraction**
**抽象**
    指定一个 {term}`隐藏` 实现细节的一般 {term}`接口` 的行为。{term}`类`、{term}`抽象类` 和 {term}`模板` 是 {term}`C++` 中的主要抽象机制。另见：{term}`封装`。

**access control**
**访问控制**
    对类的基点（bases）和 {term}`成员` 的访问可以通过声明 {term}`public`、{term}`protected` 或 {term}`private` 来控制。TC++PL 15.3, D&E 2.3, 13.9.

**ACCU**
    [C 和 C++ 用户协会](http://www.accu.org/)。一个用户团体，除其他事项外，还维持一个专业书评集。

**adapter**
**适配器**
    一个接受参数的 {term}`类`，产生一个 {term}`函数对象`，根据这些 {term}`实参` 执行操作。一个 {term}`高阶函数` 的简单形式。例如，{term}`mem_fun()` 改编了一个 {term}`成员函数` 供标准 {term}`算法` 使用。另见：{term}`序列适配器`。TC++PL 18.4.4.

**address**
**地址**
    一个内存位置。TC++PL 5.1.

**aggregate**
    一个 {term}`数组` 或一个没有 {term}`构造函数` 的 {term}`结构体`。

**algorithm**
**算法**
    一个计算的精确定义。{term}`standard library` 提供了大约 60 种标准算法，如 {term}`sort()`、search() 和 copy_unique()。TC++PL 3.8, 18.

**alignment**
**对齐**
    将 {term}`对象` 放在 {term}`内存` 中以适应硬件要求。在许多机器上，一个对象必须在一个 {term}`字` 的边界上对齐，以获得可接受的性能。

**allocator**
**分配器**
    {term}`对象`，被 {term}`standard library` {term}`容器` 用来分配和删除 {term}`内存`。TC++PL 19.4.

**and**
    && 的同义词，逻辑和 {term}`运算符`。TC++PL C.3.1.

**ANSI**
    美国国家标准组织（The American national standards organization）。在 {term}`C++ 标准` 方面与 {term}`ISO` 紧密合作。

**ANSI C**
    见 {term}`C`。

**ANSI C++**
    {term}`C++`

**application**
**应用**
    一组被视为服务于一个共同目的的 {term}`程序`（通常为其用户提供一个共同的 {term}`接口`）。

**argument passing**
**参数传递**
    函数调用的 {term}`语义` 是传递一个实参的副本。拷贝操作是由实参 {term}`类型` 的 {term}`copy 构造函数` 定义的，或者通过绑定到一个 {term}`引用`。在这两种情况下，语义都是 {term}`初始化` 的语义。TC++PL 7.2.

**argument-based lookup**
**基于参数的查询**
    基于 {term}`实参` 或 {term}`操作数` 的 {term}`命名空间`，查找 {term}`函数` {term}`名称` 或 {term}`运算符`。通常被称为 {term}`Koenig 查找`，以 Andrew Koenig 为名，他向 {term}`C++ 标准委员会` 提出了这个方案。TC++PL 8.2.6, 11.2.4, C.13.8.4.

**ARM**
    Margaret Ellis 和 {term}`Bjarne Stroustrup` 的 [注解的 C++ 参考手册](https://stroustrup.com/arm.html)。1990 年的 C++ 参考手册，对 {term}`设计` 细节和实现技术有详细的评论。现在已经过时了。也见：{term}`C++ 标准`。

**array**
**数组**
    连续的 {term}`元素` 序列。一个数组不知道自己的大小；程序员必须注意避免范围错误。在可能的情况下，使用 {term}`标准库` 中的 {term}`vector`。TC++PL 5.2-3, C.7.

**assignment operator**
**赋值运算符**
    见 {term}`=`。

**AT&T Bell Labs.**
**AT&T 贝尔实验室**
    工业研究和开发实验室，{term}`C` 和 {term}`C++` 是在那里发明、最初开发和最初使用的。D&E 2.14.

**auto**
    在 {term}`C` 和 {term}`C++98` 中，一个基本无用的关键字，冗余地表示局部 {term}`变量` 的 {term}`堆栈` 分配。在 {term}`C++0x` 中，一个表示变量从其初始化器中获得其 {term}`类型` 的关键词。例如：`double d1 = 2; auto d2 = 3*d1;` （d2 将有 {term}`double` 类型）。在 {term}`通用编程` 基本上是有用的。

**automatic garbage collection**
**自动垃圾收集**
    见 {term}`垃圾收集`

**auto_ptr**
    {term}`standard library` {term}`类模板`，用于代表一个 {term}`对象` 的所有权，即使在抛出 {term}`异常` 时也能保证适当的释放（{term}`delete`）。另见：{term}`资源管理`、{term}`resource acquisition is initialization`。TC++PL 14.4.2.

**back-end**
**后端**
    {term}`编译器` 的一部分，它在给定一个正确 {term}`程序` 的内部表示时生成代码。这个表示是由编译器 {term}`前端` 产生的。也见：{term}`前端`。

**backslash**
**反斜杠**
    参见 {term}`转义字符`。

**back_inserter()**
    返回一个 {term}`迭代器`，可以用来在 {term}`容器` 的后面添加 {term}`元素`。TC++PL 19.2.4.

**bad_alloc**
    在无法分配 {term}`自由存储空间` 的情况下，{term}`new` 抛出的标准 {term}`异常`。TC++PL 6.2.6.2, 19.4.5.

**bad_cast**
    如果 {term}`引用` 的 {term}`dynamic_cast` 失败，则抛出标准 {term}`异常`。TC++PL 15.4.1.1, D&E 14.2.2.

**base class**
**基类**
    一个 {term}`类` 是另一个类的衍生。TC++PL 2.6.2, 12, 15, D&E 2.9.
```
